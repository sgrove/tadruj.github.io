cljs-cheatsheet

lein new mies-om hello-world
lein cljsbuild auto
python -m SimpleHTTPServer

lein cljsbuild once dev
lein cljsbuild auto dev

# run the clj server part
lein ring server

# run in the real-time reload figwheel mode
lein figwheel

# Create uberjar for deployment to Heroku
lein uberjar
# Run the production uberjar localy
foreman start

# Light Table
CTRL-SHIFT-D -> search docs
CTRL-SPACE -> search LT commands
CTRL-SPACE + key => Settings: User keymap

# String
(ns namespace
  (:require [clojure.string :as string]))

string/blank?
string/upper-case
string/reverse
str s1 s2 s3 ;; concatenate

# Vectors

nth [] n
get [] n
get [] n :default
[] n

count []
conj [v] [v'] ;; add v' to the end

# Maps

{k v, k' v', k'' v''}
{} :k :default
get {} :k
:l {} ;; idiomatic

assoc {} :k :v ;; add a key
dissoc {} :k

contains? {} :k
keys {}
vals {}
find {:k "v"} :k ;; returns [:k "v"]
zipmap [ks] [vs]
hash-map k v k' v' ...
apply hash-map [k v k' v']

# Sets

#{:v1 :v2 :v3}
conj #{} :v :v' :v''
contains? #{} :v

# Lists

'(:foo :bar :baz)
conj '() :front
first
last
identical? '(l1) '(l2) ;; same thing in memory
= ;; equality

# List comprehension

for
	[x '()
	y '()]
	:let [w ()]
	:when (=)

# Sequences

seq [],'(),{}
first
rest

# Metadata
(with-meta data {})

# Other

cond
	c1 ()
	c2 ()
	:else ()

# Reverse composition

(-> % .-target .-value)
;; equals
(.-target (.-value %))
;; in JS
arg1["value"]["target"]
