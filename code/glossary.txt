Glossary

LMSH - Learn me some Haskell

pure functional - no side effects, no changed state anywhere = immutable, referential transparency. Benefits: equational reasoning, parallelism CIS194 #anki

referential transparency (pure/dirty) - If a function is called twice with the same parameters, it's guaranteed to return the same result. It also allows you to easily deduce (and even prove) that a function is correct and then build more complex functions by gluing simple functions together. LMSH

lazy -  Unless specifically told otherwise, program won't execute functions and calculate things until it's really forced to show you a result. It allows you to think of programs as a series of transformations on data. LMSH

statically typed - When you compile your program, the compiler knows which piece of code is a number, which is a string... That means that a lot of possible errors are caught at compile time. LMSH

type inference - You don't have to explicitly label every piece of code with a type because the type system can intelligently deduce them. LMSH 
type of an expression is inferred from the available type information about
the components of that expression. RWO #anki

infix function - Call it by sandwiching it between arguments. LMSH

prefix function - Placed in front of arguments. LMSH

homogenous data structure -  Stores several elements of the same type only. LMSH

polymorphic functions - Functions that have type variables. LMSH #anki

typeclass - is an interface that defines some behavior. If a type is a part of a typeclass, that means that it supports and implements the behavior the typeclass describes. LMSH

class constraint (Haskell) - Everything before the => symbol, element must be member of a specified class. (Eq, Ord{is a sequence}, Show, Read, Enum{has prev and next}, Bounded{has max and min}, Num{is polymorphic class can be Int,Integer,Float,Double and must be in Show and Eq}, Integral{whole numbers, contains Int and Integer}) LMSH

Yo! - Make sure you really understand how curried functions and partial application work because they're really important! LMSH

#anki

functional language - functions act just like any other values. ex. they can be passed and returned from functions. It's about evaluating expressions instead executing instructions. CIS194

type annotation - A way of explicitly saying of what the type an expression should be.

destructuring - putting stuff in the variable according to a pattern. Usually from tuples of arrays.

parametric polymorphism - Function or a data type can be written generically so that it can handle values identically without depending on their type.

algebraic data types - combinations of records and sums. OCaml

pattern matching - way of simultaneously examining (switch statement) and naming (destructuring) data. OCaml

abstraction - taking the pieces of similar code and factoring out their comonality. CIS194

gradual typing - the more you type the program, the more static checker can do for you

generics - higher bandwidth conduit type that allows us to flow types intelligently trough a system, where plain static types will loose informations

strong typing - no automatic casting, compile errors on calls with incompatible types instead of run-time

weak typing - will not throw compile errors in certain cases and infer/cast values

static typing - compiler knows for every variable at compile time, which type it is. Wheather it inferred or explicit.

duck typing - from Python is common, where an object acts enough like another to be used as a substitute for it.

(type) coercion = casting = conversion

side effect - dependency between the global state of the system and the behaviour of a function.

strict evaluation - the arguments to a function are evaluated before the function is applied
lazy evaluation - we create a thunk (record that we use to track an unevaluated expression), and defer the actual evaluation (promise) until it's really needed. If the result of this expression is never subsequently used, we will not compute its value at all.

subtype polymorphism - A base class defines a set of behaviours that its subclasses can modify and extend.

coarcion polymorphism - allows a value of one type to be implicitly converted into a value of another type.

polymorphic type - parameterised type - type that contains type parameters/variables a -> a

labeled arguments - when you can pass arguments based on their name not just
order.

partial application - practice of applying some arguments of a curried function and geting new function as a result

recursive function - function is recursive if it refers to itself in its definition. In functional programming, recursive functions are used to create looping constructs. RWO

labelled arguments - arguments that don't need a special order to be passed to a function, but a name instead or a mix (OCaml beauty)

data abstraction - mechanism for hiding the implementation details of data http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf

abstract data type (ADT) - has a public name, a hidden representation, and operations to create, combine, and observe values of the abstraction

object - a value exporting a procedural interface to data or behavior. Objects use procedural abstraction for information hiding, not type abstraction. They can be closures, first-class modules, records of functions, or processes. Objects are fundamentally higher-order and you are never quite certain what it is going to do. Unlike ADT.

procedural abstraction - defines procedures and hides information

type abstraction - defines algebra

Objects vs. ADTs - Objects are extensible, ADTs are easily verifiable. Designing anything provable and composable calls for ADTs. Anything non-optimizable like drivers, graphics are ok with Objects. Classes are used for creating objects and interfaces are used for types.

Program analysis - algorithms for discovering facts about the behavior of programs (which variables are constant, whether null pointer errors can occur)

Static analysis - trying to attain complete coverage of the program: using special algorithms to analyze the behavior over all possible inputs.

Dynamic analysis - testing. Run program on test cases and observe the behavior. Cannot prove that an optimization is safe or that a program is free of some class of security flaws.
