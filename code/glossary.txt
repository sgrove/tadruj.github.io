Glossary

LMSH - Learn me some Haskell

pure functional - no side effects, no changed state anywhere

referential transparency (pure/dirty) - If a function is called twice with the same parameters, it's guaranteed to return the same result. It also allows you to easily deduce (and even prove) that a function is correct and then build more complex functions by gluing simple functions together. LMSH

lazy -  Unless specifically told otherwise, program won't execute functions and calculate things until it's really forced to show you a result. It allows you to think of programs as a series of transformations on data. LMSH

statically typed - When you compile your program, the compiler knows which piece of code is a number, which is a string... That means that a lot of possible errors are caught at compile time. LMSH

type inference - You don't have to explicitly label every piece of code with a type because the type system can intelligently figure out a lot about it. LMSH

infix function - Call it by sandwiching it between arguments. LMSH

prefix function - Placed in front of arguments. LMSH

homogenous data structure -  Stores several elements of the same type only. LMSH

polymorphic functions - Functions that have type variables are called. LMSH

typeclass - is an interface that defines some behavior. If a type is a part of a typeclass, that means that it supports and implements the behavior the typeclass describes. LMSH

class constraint (Haskell) - Everything before the => symbol, element must be member of a specified class. (Eq, Ord{is a sequence}, Show, Read, Enum{has prev and next}, Bounded{has max and min}, Num{is polymorphic class can be Int,Integer,Float,Double and must be in Show and Eq}, Integral{whole numbers, contains Int and Integer}) LMSH

Yo! - Make sure you really understand how curried functions and partial application work because they're really important! LMSH

#anki

type annotation - A way of explicitly saying of what the type an expression should be.

destructuring - putting stuff in the variable according to a pattern. Usually from tuples of arrays.


